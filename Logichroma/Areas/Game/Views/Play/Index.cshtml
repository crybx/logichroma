@using Logichroma.GameEngine.Enums
@model Logichroma.Areas.Game.Models.GameDetailsViewModel
@{
    ViewBag.Title = "Logichroma";
}

<h2>@Model.Game.Name</h2>
<p>Waiting on @Model.CurrentPlayer.DisplayName</p>

<!-- DECK -->
<div>
    <h3>Deck:</h3>
    <div class="card-stack">
        <div class="card" style="background-color: gray;">
            <div class="card-container">
                <p style="color: darkgray">
                    @Model.DeckCount
                </p>
            </div>
        </div>
    </div>
    <div class="clear"></div>
</div>

<!-- PLAYER HANDS -->
<div>
    <h3>Players:</h3>
    @foreach (var player in Model.Game.PlayersInOrder)
    {
        var playerCards = Model.Game.GameCards.Where(x => x.GamePlayerId == player.GamePlayerId);

        <div>Player @(player.PlayerNumber + 1) - @player.DisplayName</div>
        <div class="card-stack">
            @foreach (var card in playerCards)
            {
                if (player == Model.Player)
                {
                    var bgColor = card.IsSuitRevealed ? card.CardSuit.BackgroundColor : "gray";
                    var textColor = card.IsSuitRevealed ? card.CardSuit.TextColor : "lightgray";
                    var cardValue = card.IsValueRevealed ? card.CardValue.FaceValue.ToString() : "?";

                    <div class="card" style="background-color: @bgColor;">
                        <div class="card-container">
                            <p style="color: @textColor">
                                @cardValue
                            </p>
                        </div>
                    </div>
                }
                else
                {
                    <div class="card" style="background-color: @card.CardSuit.BackgroundColor;">
                        <div class="card-container">
                            <p style="color: @card.CardSuit.TextColor">
                                @card.CardValue.FaceValue
                            </p>
                        </div>
                    </div>
                }
            }
        </div>
        <div class="clear"></div>

        if (Model.IsCurrentPlayer && player == Model.Player)
        {
            <div style="padding: 5px 0 10px 5px;">
                <a class="btn btn-secondary" href="#">Give Hint</a>
                <a class="btn btn-secondary" href="#">Discard Card</a>
                <a class="btn btn-secondary" href="#">Play Card</a>
            </div>
        }
    }
</div>

<!-- PLAY STACKS -->
@if (Model.Game.GameCards.Any(x => x.CardState == CardState.Played.ToString()))
{
    <div>
        <h3>Play Stacks:</h3>
        <div class="card-stack">
            @foreach (var card in Model.Game.GameCards.Where(x => x.CardState == CardState.Played.ToString()))
            {
                <div class="card" style="background-color: @card.CardSuit.BackgroundColor;">
                    <div class="card-container">
                        <p style="color: @card.CardSuit.TextColor">
                            @card.CardValue.FaceValue
                        </p>
                    </div>
                </div>
            }
        </div>
        <div class="clear"></div>
    </div>
}

<!-- DISCARD PILE -->
@if (Model.Game.GameCards.Any(x => x.CardState == CardState.Discard.ToString()))
{
    <div>
        <h3>Discards:</h3>
        <div class="card-stack">
            @foreach (var card in Model.Game.GameCards.Where(x => x.CardState == CardState.Discard.ToString()))
            {
                <div class="card" style="background-color: @card.CardSuit.BackgroundColor;">
                    <div class="card-container">
                        <p style="color: @card.CardSuit.TextColor">
                            @card.CardValue.FaceValue
                        </p>
                    </div>
                </div>
            }
        </div>
        <div class="clear"></div>
    </div>
}
