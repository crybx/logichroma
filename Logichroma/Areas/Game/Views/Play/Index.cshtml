@using Logichroma.GameEngine.Enums
@model Logichroma.Areas.Game.Models.GameDetailsViewModel
@{
    ViewBag.Title = "Logichroma";
}

<h2>@Model.Game.Name</h2>
<p>Waiting on @Model.CurrentPlayer.DisplayName</p>

<!-- DECK AND TOKENS-->
<div class="row">
    <div class="col-3">
        <h3>Deck:</h3>
        <div class="card-stack">
            <div class="card" style="background-color: #6c757d;">
                <div class="card-container">
                    <p style="color: darkgray">
                        @Model.DeckCount
                    </p>
                </div>
            </div>
        </div>
        <div class="clear"></div>
    </div>
    <div class="col-3">
        <dl class="dl-horizontal">
            <dt>
                Hints Remaining:
            </dt>
            <dd>
                @Html.DisplayFor(model => model.Game.HintTokens)
            </dd>
            <dt>
                Misfires Remaining:
            </dt>
            <dd>
                @Html.DisplayFor(model => model.Game.MisfireTokens)
            </dd>

        </dl>
    </div>
</div>

<!-- PLAYER HANDS -->
<div>
    <h3>Players:</h3>
    @foreach (var player in Model.Game.PlayersInOrder)
    {
        var playerCards = Model.Game.GameCards.Where(x => x.GamePlayerId == player.GamePlayerId).OrderBy(x => x.Order);

        <div style="padding-top: 20px;">
            Player @(player.PlayerNumber + 1) - @player.DisplayName
            @if (Model.IsCurrentPlayer && player != Model.Player && Model.Game.HintTokens > 0)
            {
                <span> - </span>
                <a class="btn btn-outline-primary" href="#">Give Hint</a>
            }
        </div>
        
        <div class="card-stack row">
            @foreach (var card in playerCards)
            {
                if (player == Model.Player)
                {
                    var bgColor = card.IsSuitRevealed ? card.CardSuit.BackgroundColor : "#6c757d;";
                    var textColor = card.IsSuitRevealed ? card.CardSuit.TextColor : "lightgray";
                    var cardValue = card.IsValueRevealed ? card.CardValue.FaceValue.ToString() : "?";

                    <div style="float: left; text-align: center;">
                        <div class="card row" style="background-color: @bgColor;">
                            <div class="card-container">
                                <p style="color: @textColor">
                                    @cardValue
                                </p>
                            </div>
                        </div>
                        @if (Model.IsCurrentPlayer)
                        {
                            <div class="card-button-div">
                                <a class="btn btn-outline-dark card-button" 
                                   href="@Url.Action("Discard", new { order = card.Order, gameId = Model.Game.Id })">Discard</a>
                            </div>
                            <div class="card-button-div">
                                <a class="btn btn-outline-secondary card-button" href="#">Play</a>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class="card" style="background-color: @card.CardSuit.BackgroundColor;">
                        <div class="card-container">
                            <p style="color: @card.CardSuit.TextColor">
                                @card.CardValue.FaceValue
                            </p>
                        </div>
                    </div>
                }
            }
        </div>
        <div class="clear"></div>
    }
</div>

<!-- PLAY STACKS -->
@if (Model.Game.GameCards.Any(x => x.CardState == CardState.Played.ToString()))
{
    <div>
        <h3>Play Stacks:</h3>
        <div class="card-stack">
            @foreach (var card in Model.Game.GameCards.Where(x => x.CardState == CardState.Played.ToString()))
            {
                <div class="card" style="background-color: @card.CardSuit.BackgroundColor;">
                    <div class="card-container">
                        <p style="color: @card.CardSuit.TextColor">
                            @card.CardValue.FaceValue
                        </p>
                    </div>
                </div>
            }
        </div>
        <div class="clear"></div>
    </div>
}

<!-- DISCARD PILE -->
@if (Model.Game.Discards.Any())
{
    <div>
        <h3>Discards:</h3>
        <div class="card-stack">
            @foreach (var card in Model.Game.Discards)
            {
                <div class="card" style="background-color: @card.CardSuit.BackgroundColor;">
                    <div class="card-container">
                        <p style="color: @card.CardSuit.TextColor">
                            @card.CardValue.FaceValue
                        </p>
                    </div>
                </div>
            }
        </div>
        <div class="clear"></div>
    </div>
}

<div id="HintPopup" style="display: none;"></div>
