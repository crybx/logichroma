@using Logichroma.GameEngine.Enums
@model Logichroma.Areas.Game.Models.GameDetailsViewModel
@{
    ViewBag.Title = "Logichroma";
}

@section Scripts {
    <script type="text/javascript">

        $(document).ready(function () {

            var isCurrentPlayer = @Json.Encode(Model.IsCurrentPlayer);

            // We only need to poll if it is someone else's turn.
            if (!isCurrentPlayer) {

                // Start basic polling every 5 seconds.
                setTimeout(checkPlayerTurn, 5000);
            }
        });

        function checkPlayerTurn() {

            $.ajax({
                url: '@Url.Action("GetCurrentPlayer")',
                type: 'GET',
                data: { gameId: @Model.Game.Id },
                cache: false,
                success: function (result) {

                    // What player's turn it is when the page loads.
                    var currentPlayer = @Model.CurrentPlayer.PlayerNumber;

                    // If it is now a different player's turn, reload.
                    if (result !== currentPlayer) {

                        location.reload();
                    }
                }
            });

            setTimeout(checkPlayerTurn, 5000);
        }

        function showHintOptions(element) {

            if (element.style.display === "none") {
                element.style.display = "block";
            } else {
                element.style.display = "none";
            }
        }
        
    </script>  
}

<h2>@Model.Game.Name</h2>
<p>Waiting on @Model.CurrentPlayer.DisplayName</p>

<!-- DECK AND TOKENS-->
<div class="row">
    <div class="col-3">
        <h3>Deck:</h3>
        <div class="card-stack">
            <div class="card" style="background-color: #6c757d;">
                <div class="card-container">
                    <p style="color: darkgray">
                        @Model.DeckCount
                    </p>
                </div>
            </div>
        </div>
        <div class="clear"></div>
    </div>
    <div class="col-3">
        <dl class="dl-horizontal">
            <dt>
                Hints Remaining:
            </dt>
            <dd>
                @Html.DisplayFor(model => model.Game.HintTokens)
            </dd>
            <dt>
                Misfires Remaining:
            </dt>
            <dd>
                @Html.DisplayFor(model => model.Game.MisfireTokens)
            </dd>
        </dl>
    </div>
</div>

<!-- PLAYER HANDS -->
<div>
    <h3>Players:</h3>
    
    @foreach (var player in Model.Game.PlayersInOrder)
    {
        var playerCards = Model.Game.GameCards.Where(x => x.GamePlayerId == player.GamePlayerId).OrderBy(x => x.Order);

        <div style="padding-top: 20px;">
            Player @(player.PlayerNumber + 1) - @player.DisplayName
            @if (Model.IsCurrentPlayer && player != Model.Player && Model.Game.HintTokens > 0)
            {
                var hintOptionsDivId = "HintOptionsForPlayer" + player.GamePlayerId;

                <span> - </span>
                <button class="btn btn-outline-primary" onclick="showHintOptions(@hintOptionsDivId)">Hint Options</button>
                <div id="@hintOptionsDivId" style="display: none;">
                    @Html.Action("GetHintOptions", new { gameId = Model.Game.Id, playerId = player.GamePlayerId })
                </div>
            }
        </div>
        
        <div class="card-stack">
            @foreach (var card in playerCards)
            {
                if (player == Model.Player)
                {
                    var bgColor = card.IsSuitRevealed ? card.CardSuit.BackgroundColor : "#6c757d;";
                    var textColor = card.IsSuitRevealed ? card.CardSuit.TextColor : "lightgray";
                    var cardValue = card.IsValueRevealed ? card.CardValue.FaceValue.ToString() : "?";

                    <div style="float: left; text-align: center;">
                        <div class="card" style="background-color: @bgColor;">
                            <div class="card-container">
                                <p style="color: @textColor">
                                    @cardValue
                                </p>
                            </div>
                        </div>
                        @if (Model.IsCurrentPlayer)
                        {
                            <div class="card-button-div">
                                <a class="btn btn-outline-dark card-button" 
                                   href="@Url.Action("Discard", new { order = card.Order, gameId = Model.Game.Id })">Discard</a>
                            </div>
                            <div class="card-button-div">
                                <a class="btn btn-outline-secondary card-button" 
                                   href="@Url.Action("PlayCard", new { order = card.Order, gameId = Model.Game.Id })">Play</a>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class="card" style="background-color: @card.CardSuit.BackgroundColor;">
                        <div class="card-container" style="color: @card.CardSuit.TextColor">
                            <p>
                                @card.CardValue.FaceValue
                            </p>
                            <p style="font-size: 11px;">
                                @if (card.IsSuitRevealed)
                                {
                                    <span>C</span>
                                }
                                @if (card.IsValueRevealed)
                                {
                                    <span>#</span>
                                }
                            </p>
                        </div>
                    </div>
                }
            }
        </div>
        <div class="clear"></div>
    }
</div>

<!-- PLAY STACKS -->
@if (Model.Game.GameCards.Any(x => x.CardState == CardState.Played.ToString()))
{
    <div>
        <h3>Play Stacks:</h3>
        
        @foreach (var cardSuit in Model.CardSuitsInPlay)
        {
            var cards = Model.Game.GameCards
                .Where(x => x.CardState == CardState.Played.ToString() && x.CardSuit.Name == cardSuit.Name)
                .OrderBy(x => x.CardValue.FaceValue);

            <div class="card-stack">
                @foreach (var card in cards)
                {
                    <div style="float: left;">
                        <div class="card" style="background-color: @card.CardSuit.BackgroundColor;">
                            <div class="card-container">
                                <p style="color: @card.CardSuit.TextColor">
                                    @card.CardValue.FaceValue
                                </p>
                            </div>
                        </div>
                    </div>
                }
            </div>
            <div class="clear"></div>
        }
    </div>
}

<!-- DISCARD PILE -->
@if (Model.Game.Discards.Any())
{
    <div>
        <h3>Discards:</h3>
        <div class="card-stack">
            @foreach (var card in Model.Game.Discards)
            {
                <div class="card" style="background-color: @card.CardSuit.BackgroundColor;">
                    <div class="card-container">
                        <p style="color: @card.CardSuit.TextColor">
                            @card.CardValue.FaceValue
                        </p>
                    </div>
                </div>
            }
        </div>
        <div class="clear"></div>
    </div>
}
